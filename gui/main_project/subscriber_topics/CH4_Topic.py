from rclpy.node import Node
from std_msgs.msg import Float32

GAS_CH4_TOPIC = '/gas/ch4_ppm'


class CH4_Topic(Node):
    def __init__(self):

        super().__init__('ch4_topic_node_subscription')

        # --- Setup subscriber attributes
        self.__gas_ch4_subscriber = None

        # --- Setup frame attribute
        self.__gas_value = None

        # --- Setup subscriber topic
        self.__subscribe_ch4_topic()

    # method to subscribe the ch4 data, generated by ROS
    def __subscribe_ch4_topic(self):
        try:
            self.__gas_ch4_subscriber = self.create_subscription(
                Float32,
                GAS_CH4_TOPIC,
                self.receive_ch4_data,#callback
                10  # QoS queue size
            )
            self.get_logger().info(f'Subscribtion has been successfull in {GAS_CH4_TOPIC}')
        except Exception:
            self.get_logger().info(f'Subscribtion has been failed in {GAS_CH4_TOPIC}')

    # callback method to receive ch4 data
    def receive_ch4_data(self, message):
        self.__gas_value = int(message.data)

    def get_ch4_value(self):
        return self.__gas_value

