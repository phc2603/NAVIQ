from rclpy.node import Node  # Import the Node class from ROS 2
from sensor_msgs.msg import CompressedImage  # Import the Image message type from sensor_msgs
import io
from PIL import Image, ImageTk

VIDEO_TOPIC = '/usbcam_node/compressed'


class Image_Topic(Node):
    def __init__(self):
        #--- Setup subscriber 
        super().__init__('image_topic_node_subscriber')

        #--- Setup subscriber attributes
        self.__image_subscriber = None

        #--- Setup frame attribute
        self.__frame = None

        #--- Setup subscriber topic
        self.__subscribe_image_topic()

    #method to subscribe in the image topic
    def __subscribe_image_topic(self):
        self.__image_subscriber = self.create_subscription(
            CompressedImage,
            VIDEO_TOPIC,
            self.receive_image_callback, #callback functopn
            10  # QoS depth
        )

    #callback method to recieve the image frame, generated by ROS
    def receive_image_callback(self, msg):
        try:
            image_bytes = bytes(msg.data)

            image = Image.open(io.BytesIO(image_bytes))

            self.__frame = ImageTk.PhotoImage(image)

            self.get_logger().debug('Frame received and processing')
        except Exception as e:
            self.get_logger().error(f'Error to process image: {e}')

    def get_frame(self):
        return self.__frame
