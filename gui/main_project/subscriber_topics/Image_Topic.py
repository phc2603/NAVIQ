import roslibpy
import base64
import io
from PIL import Image, ImageTk

VIDEO_TOPIC = '/usbcam_node/compressed'


class Image_Topic:
    def __init__(self, client):
        #--- Setup client by parameter
        self.__ros_client = client

        #--- Setup subscriber attributes
        self.__image_subscriber = None

        #--- Setup frame attribute
        self.__frame = None

        #--- Setup subscriber topic
        self.__subscribe_image_topic()

    #method to subscribe in the image topic
    def __subscribe_image_topic(self):
        self.__image_subscriber = roslibpy.Topic(
            self.__ros_client,
            VIDEO_TOPIC,
            'sensor_msgs/CompressedImage'
        )
        self.__image_subscriber.subscribe(self.receive_image_callback)

    #callback method to recieve the image frame, generated by ROS
    def receive_image_callback(self, message):
        base64_data = message['data']
        image_bytes = base64.b64decode(base64_data)
        try:
            image = Image.open(io.BytesIO(image_bytes))
            self.__frame = ImageTk.PhotoImage(image)
        except Exception as e:
            print(f"Error to process the image: {e}")

    def get_frame(self):
        return self.__frame
